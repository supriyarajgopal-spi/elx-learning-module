<?php

/**
 * @file
 * Extends FormAPI checkboxes with the 'checkall' behavior.
 */

/**
 * Implementation of hook_form_alter().
 */
function checkall_form_alter(&$form, $form_state, $form_id) {
  $form['#after_build'][] = 'checkall_form_after_build';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function checkall_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $instance = $form['#instance'];
  if ($instance['widget']['type'] == 'options_buttons') {
    $field = $form['#field'];
    if (empty($form['instance']['settings'])) {
      $form['instance']['settings'] = array();
    }
    $form['instance']['settings'] += checkall_widget_settings_form($field, $instance);
  }
}

/**
 * Implements hook_element_info().
 */
function checkall_element_info() {
  $elements['options_buttons '] = array('#after_build' => array('checkall_element_process'));
  return $elements;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function checkall_field_widget_info_alter(&$info) {
  if (isset($info['options_buttons']['settings'])) {
    $info['options_buttons']['settings'] += array('checkall' => FALSE);
  }
}

/**
 * Configuration form for checkall settings for a field instance.
 */
function checkall_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $instance['settings'];

  $form['checkall'] = array(
    '#title' => t('Checkall settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 2,
  );
  $form['checkall']['checkall'] = array(
    '#title' => t('Include checkall options'),
    '#type' => 'radios',
    '#options' => array(
      0 => t('Disabled'),
      1 => t('Enabled')
    ),
    '#default_value' => isset($settings['checkall']['checkall']) ? $settings['checkall']['checkall'] : 0,
    '#description' => t('Enable this to display checkall options near checkbox groups when this field is configured to accept multiple values.'),
  );

  return $form;
}

/**
 * After build callback.
 */
function checkall_form_after_build($elements, &$form_state) {
  checkall_form_after_build_recursive($elements, $form_state);
  return $elements;
}

/**
 * Helper function to find elements with '#checkall' attribute recursively.
 */
function checkall_form_after_build_recursive(&$elements, &$form_state, $checkall = NULL) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      if (isset($checkall)) {
        // Inherit checkall attribute if specified by the caller.
        $children_checkall = $checkall;
      }
      elseif (!empty($elements[$key]['#checkall'])) {
        // Inherit checkall attribute if specified in the form element.
        $children_checkall = $elements[$key]['#checkall'];
      }
      else {
        // Assume no checkall attribute has been specified.
        $children_checkall = NULL;

        // Inherit checkall attribute if specified in CCK field settings.
        if ($elements[$key]['#type'] == 'container' && isset($elements['#entity']->type)) {
          $field = field_info_instance('node', $key, $elements['#entity']->type);
          if (!empty($field) && isset($field['settings']) && !empty($field['settings']['checkall'])) {
            $children_checkall = TRUE;
          }
        }
      }

      checkall_form_after_build_recursive($elements[$key], $form_state, $children_checkall);
    }
  }
  if (isset($checkall) && isset($elements['#type']) && $elements['#type'] == 'checkboxes') {
    $elements['#checkall'] = $checkall;
    $elements = checkall_element_process($elements);
  }
}

/**
 * Process the checkall extension for the checkboxes element.
 */
function checkall_element_process($element) {
  // See if the #checkall flag is present.
  if (!empty($element['#checkall'])) {
    $class = is_string($element['#checkall']) ? trim($element['#checkall']) : '';
    if (empty($class)) {
      $class = 'checkall-'. $element['#id'];
    }

    // Append classes to the checkboxes element.
    if (!isset($element['#attributes'])) {
      $element['#attributes'] = array();
    }
    if (empty($element['#attributes']['class'])) {
      $element['#attributes']['class'] = array('form-checkall '. $class);
    }
    else {
      $element['#attributes']['class'] .= array(' form-checkall '. $class);
    }

    // Append class to the checkboxes items.
    foreach (element_children($element) as $key) {
      if ($element[$key]['#type'] == 'checkbox') {
        if (!isset($element[$key]['#attributes'])) {
          $element[$key]['#attributes'] = array();
        }
        if (empty($element[$key]['#attributes']['class'])) {
          $element[$key]['#attributes']['class'] = array($class);
        }
        else {
          $element[$key]['#attributes']['class'] .= array(' '. $class);
        }
      }
    }

    // Append the unique checkboxes class to Drupal.settings.checkall.
    drupal_add_js(array('checkall' => array('groups' => $class)), 'setting');
    // Add our stylesheet and javascript files to the page.
    drupal_add_css(drupal_get_path('module', 'checkall') .'/checkall.css');
    //drupal_add_js(drupal_get_path('module', 'checkall') .'/checkall.js',array('type'=>'file','cache'=>FALSE));
    drupal_add_js(drupal_get_path('module', 'checkall') .'/checkall.js');
  }

  return $element;
}
