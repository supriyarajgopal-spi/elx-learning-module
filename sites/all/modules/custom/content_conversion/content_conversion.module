<?php

/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_conversion_form_content_object_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];
  if (!empty($node->nid)) {
    $form['actions']['h5p'] = array(
      '#type' => 'submit',
      '#value' => t('Generate H5P content'),
      '#weight' => 15,
      '#submit' => array('content_conversion_h5p_submit'),
    );
  }
}

/**
 * Form submission handler for node_form().
 *
 * Generates interactive content node for content object node.
 *
 * @see content_conversion_form_content_object_node_form_alter()
 * @see node_form_validate()
 */
function content_conversion_h5p_submit($form, &$form_state) {
  content_conversion_content_object_h5p($form_state['node']);
}

/**
 * Generates an interactive content node for a Content Object node.
 *
 * @param object $node
 *   A Content Object node.
 */
function content_conversion_content_object_h5p($node) {
  if (!empty($node->field_h5p_node[LANGUAGE_NONE][0]['target_id'])) {
    $h5p_node = node_load($node->field_h5p_node[LANGUAGE_NONE][0]['target_id']);
  }
  if (empty($h5p_node)) {
    $h5p_node = array();
  }
  else {
    $h5p_node = array(
      'nid' => $h5p_node->nid,
      'vid' => $h5p_node->vid,
    );
  }
  $h5p_node += array(
    'uid' => $node->uid,
    'name' => $node->name,
    'type' => 'h5p_content',
    'language' => $node->language,
    'title' => $node->title,
    'status' => $node->status,
    'promote' => $node->promote,
    'sticky' => $node->sticky,
    'created' => $node->created,
    'revision' => FALSE,
    'comment' => $node->comment,
    'h5p_type' => 'create',
    'main_library_id' => h5peditor_get_library_property('H5P.CoursePresentation 1.11', 'libraryId'),
    'json_content' => content_conversion_h5p_json($node),
    'embed_type' => 'div',
    'disable' => 0,
    'h5p_library' => 'H5P.CoursePresentation 1.11',
  );
  $h5p_node = (object) $h5p_node;
  node_save($h5p_node);
  $node->field_h5p_node[LANGUAGE_NONE][0]['target_id'] = $h5p_node->nid;
  node_save($node);
}

/**
 * Generates H5P JSON code from a Content Object node.
 *
 * @param object $content_object
 *   A Content Object node.
 */
function content_conversion_h5p_json($content_object) {
  $h5p = new stdClass();
  // Convert the Content Object node into a Course Presentation.
  $h5p->presentation = new stdClass();
  $h5p->presentation->slides = array();
  // Convert learning object nodes into Course Presentation slides.
  foreach ($content_object->field_learning_objects[$content_object->language] as $learning_object) {
    $slide = new stdClass();
    $h5p->presentation->slides[] = $slide;
    $node = node_load($learning_object['target_id']);
    $function = '_content_conversion_node_' . $node->type;
    if (function_exists($function)) {
      $function($node, $slide);
    }
  }
  return json_encode($h5p);
}

/**
 * Converts a List node to H5P slide data.
 *
 * @param object $node
 *   A List node.
 * @param object $slide
 *   H5P data for a single slide.
 */
function _content_conversion_node_list($node, $slide) {
  foreach ($node->field_list_item[$node->language] as $item) {
    $paragraph = paragraphs_item_load($item['value']);
    $slide->elements = array();
    $element = new stdClass();
    $element->x = 1.0615711252654;
    $element->y = 6.2893081761006;
    $element->width = 68.789808917197;
    $element->height = 56.184486373166;
    $action = new stdClass();
    $action->library = 'H5P.Video 1.2';
    $params = new stdClass();
    $visuals = new stdClass();
    $visuals->fit = TRUE;
    $visuals->controls = TRUE;
    $params->visuals = $visuals;
    $playback = new stdClass();
    $playback->autoplay = FALSE;
    $playback->loop = FALSE;
    $params->playback = $playback;
    $l10n = new stdClass();
    $l10n->name = 'Video';
    $l10n->loading = 'Video player loading...';
    $l10n->noPlayers = 'Found no video players that support the given video format.';
    $l10n->noSources = 'Video is missing sources.';
    $l10n->aborted = 'Media playback has been aborted.';
    $l10n->networkFailure = 'Network failure.';
    $l10n->cannotDecode = 'Unable to decode media.';
    $l10n->formatNotSupported = 'Video format not supported.';
    $l10n->mediaEncrypted = 'Media encrypted';
    $l10n->unknownError = 'Unknown error.';
    $l10n->invalidYtId = 'Invalid YouTube ID.';
    $l10n->unknownYtId = 'Unable to find video with the given YouTube ID.';
    $l10n->restrictedYt = 'The owner of this video does not allow it to be embedded.';
    $params->l10n = $l10n;
    $params->sources = array();
    if (!empty($paragraph->field_list_video)) {
      foreach ($paragraph->field_list_video[LANGUAGE_NONE] as $file) {
        $source = new stdClass();
        $source->path = file_create_url($file['uri']);
        $source->mime = $file['filemime'];
        $copyright = new stdClass();
        $copyright->license = 'U';
        $source->copyright = $copyright;
        $params->sources[] = $source;
      }
    }
    $action->params = $params;
    $element->action = $action;
    $element->alwaysDisplayComments = FALSE;
    $element->backgroundOpacity = 0;
    $element->displayAsButton = FALSE;
    $element->invisible = FALSE;
    $element->solution = '';
    $slide->elements[] = $element;
    // Avoid creating empty text box by stripping tags from safe value and
    // trimming white space and non-breaking space.
    $safe = trim(strip_tags($paragraph->field_list_text[LANGUAGE_NONE][0]['safe_value']), " \t\n\r\0\x0B\xC2\xA0");
    if ($safe != '') {
      $element = new stdClass();
      $element->x = 1.0615711252654;
      $element->y = 67.027044025157;
      $element->width = 96.390658174098;
      $element->height = 28.930817610063;
      $action = new stdClass();
      $action->library = 'H5P.AdvancedText 1.1';
      $params = new stdClass();
      $params->text = $paragraph->field_list_text[LANGUAGE_NONE][0]['value'];
      $action->params = $params;
      $element->action = $action;
      $element->alwaysDisplayComments = FALSE;
      $element->backgroundOpacity = 0;
      $element->displayAsButton = FALSE;
      $element->invisible = FALSE;
      $element->solution = '';
      $slide->elements[] = $element;
    }
  }
}

/**
 * Converts a Story node to H5P slide data.
 *
 * @param object $node
 *   A Story node.
 * @param object $slide
 *   H5P data for a single slide.
 */
function _content_conversion_node_story($node, $slide) {

  $slide->elements = array();
  $slide->slideBackgroundSelector = new stdClass();
  $slide->keywords = array();

  $element = new stdClass();
  $element->x = 1.0615711252654;
  $element->y = 2.0898846960168;
  $element->width = 98.513800424628;
  $element->height = 58.280922431866;
  $element->alwaysDisplayComments = false;
  $element->backgroundOpacity = 0;
  $element->displayAsButton = false;
  $element->invisible = false;
  $element->solution = '';

  $action = new stdClass();
  $action->library = "H5P.AdvancedText 1.1";
  $action->subContentId = '0';

  $params = new stdClass();
  $params->text = $node->field_story_copy[$node->language][0]['safe_value'];
  if (!empty($node->field_story_label[$node->language][0]['value'])) {
    $params->contentName = $node->field_story_label[$node->language][0]['value'];
  }
  $params->alt = '';

  $action->params = $params;
  $element->action = $action;
  $action->subContentId = 0;
  $slide->elements[] = $element;

  if (!empty($node->field_story_image[$node->language][0]['uri'])) {
    $element = new stdClass();
    $element->x = 1.0615711252654;
    $element->y = 59.538784067086;
    $element->width = 30.430461002119;
    $element->height = 40;
    $element->alwaysDisplayComments = false;
    $element->backgroundOpacity = 0;
    $element->displayAsButton = false;
    $element->invisible = false;
    $element->solution = '';

    $file = new stdClass();
    $file->path = file_create_url($node->field_story_image[$node->language][0]['uri']);
    $file->mime = $node->field_story_image[$node->language][0]['filemime'];
    $file->width = $node->field_story_image[$node->language][0]['height'];
    $file->height = $node->field_story_image[$node->language][0]['width'];

    $copyright = new stdClass();
    $copyright->license = "U";

    $file->copyright = $copyright;

    $params = new stdClass();
    $params->contentName = "Image";
    $params->alt = "Image for the slide";
    $params->file = $file;

    $action = new stdClass();
    $action->library = "H5P.Image 1.0";
    $action->subContentId = 0;
    $action->params = $params;
    $element->action = $action;
    $slide->elements[] = $element;
  }

}

/**
 * Created by SUPRIYA RAJGOPAL on 25Aug16
 *
 * Generates H5P JSON of Reveal learning object type.
 *
 * @param object $content_object
 *   A Content Object node.
 * @param object $slide
 *   A slide object.
 * Returns array matching the JSON structure
 */
function _content_conversion_node_reveal($learning_object, $slide)
{	
	$element = new stdClass(); //Elements of the slide. In this case, the Click To Reveal option within a Course Presentation.
	
	//Set position & dimension of element within the slide 
	$element->x = 1;
	$element->y = 0;
	$element->width = 97;
	$element->height = 96;
	
	$element->action = new stdClass();
	$element->action->library = 'H5P.ClickToReveal 1.0';
	
	$element->action->params = new stdClass(); //TODO: Look up tng_shadow  module & build this dynamically
	
	//Intro text of learning object to H5P description
	if(isset($learning_object->field_intro) && !empty($learning_object->field_intro))
		$element->action->params->description = $learning_object->field_intro[$learning_object->language][0]['value'];
	else
		$element->action->params->description = t('');
	
	$element->action->params->cards = array();
	
	//Create card objects array iff Reveal collection paragraph bundle is not empty
	if(isset($learning_object->field_reveal_collection) && !empty($learning_object->field_reveal_collection))
	{
		$cards = $learning_object->field_reveal_collection[$learning_object->language]; //Array of cards
		
		/**
		 * foreach Click To Reveal card..
		 *  load the Paragraph entity i.e Reveal collection field in Reveal content type,
		 *  access each of thumbnail, large image & text of the paragraph and
		 *  form the card object and push to the cards array
		 */
		foreach($cards as $card) 
		{
			$cardParagraphEntity = entity_load('paragraphs_item', array($card['value'])); //Borrowed from https://www.drupal.org/node/2510602#comment-10049490
			
			$cardObject = new stdClass();
			
			$cardParagraph = $cardParagraphEntity[$card['value']];
			
			//Thumbnail image object
			if(isset($cardParagraph->field_reveal_thumbnail) && !empty($cardParagraph->field_reveal_thumbnail))
			{
				$thumbnailImage = $cardParagraph->field_reveal_thumbnail[LANGUAGE_NONE][0];
				
				$cardObject->thumbnail_image = new stdClass();
				$cardObject->thumbnail_image->path = file_create_url($thumbnailImage['uri']);
				$cardObject->thumbnail_image->mime = $thumbnailImage['filemime'];
				$cardObject->thumbnail_image->copyright = new stdClass();
				$cardObject->thumbnail_image->copyright->license = 'U';
				//To maintain fixed 1:1 aspect ratio, change width x height to 70 x 70 (noted while checking sample H5P JSON content)
				$cardObject->thumbnail_image->width = $thumbnailImage['width'];
				$cardObject->thumbnail_image->height = $thumbnailImage['height'];
			}
			
			//Large image object
			if(isset($cardParagraph->field_reveal_hero) && !empty($cardParagraph->field_reveal_hero))
			{
				$largeImage = $cardParagraph->field_reveal_hero[LANGUAGE_NONE][0];
				$cardObject->large_image = new stdClass();
				$cardObject->large_image->path = file_create_url($largeImage['uri']);
				$cardObject->large_image->mime = $largeImage['filemime'];
				$cardObject->large_image->copyright = new stdClass();
				$cardObject->large_image->copyright->license = 'U';
				//Maintains 16:9 aspect ratio, change width x height to 765 x 430 (noted while checking sample H5P JSON content)
				$cardObject->large_image->width = $largeImage['width'];
				$cardObject->large_image->height = $largeImage['height'];
			}
			//Text
			if(isset($cardParagraph->field_reveal_text) && !empty($cardParagraph->field_reveal_text))
			{
				$text = $cardParagraph->field_reveal_text[LANGUAGE_NONE][0]['safe_value'];
				$cardObject->text = $text;
			}
			
			$element->action->params->cards[] = $cardObject;
		}
	}
	else
		$element->action->params->cards[] = new stdClass();
	
	//Title of Click to Reveal element
	if(isset($learning_object->field_subtitle) && !empty($learning_object->field_subtitle))
		$element->action->params->title = $learning_object->field_subtitle[$learning_object->language][0]['value'];
	else
		$element->action->params->title = t('');
	
	//Default, constant settings
	$element->action->params->retry = t('Retry');
	$element->action->subContentId = 0;
	$element->alwaysDisplayComments = false;
	$element->backgroundOpacity = 0;
	$element->displayAsButton = false;
	$element->invisible = false;
	$element->solution = "";
	
	$slide->elements[] = $element; //Array of elements
	
	$slide->slideBackgroundSelector = new stdClass(); //Empty since no background image will be selected
	$slide->keywords = array(); //Empty since no keywords will be specified
}