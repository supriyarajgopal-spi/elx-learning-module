<?php

/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_conversion_form_content_object_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];
  if (!empty($node->nid)) {
    $form['actions']['h5p'] = array(
      '#type' => 'submit',
      '#value' => t('Generate H5P content'),
      '#weight' => 15,
      '#submit' => array('content_conversion_h5p_submit'),
    );
  }
}

/**
 * Form submission handler for node_form().
 *
 * Generates interactive content node for content object node.
 *
 * @see content_conversion_form_content_object_node_form_alter()
 * @see node_form_validate()
 */
function content_conversion_h5p_submit($form, &$form_state) {
  $h5p_node = content_conversion_content_object_h5p($form_state['node']);
  $form_state['redirect'] = entity_uri('node', $h5p_node);
}

/**
 * Generates an interactive content node for a Content Object node.
 *
 * @param object $node
 *   A Content Object node.
 */
function content_conversion_content_object_h5p($node) {
  if (!empty($node->field_h5p_node[LANGUAGE_NONE][0]['target_id'])) {
    $h5p_node = node_load($node->field_h5p_node[LANGUAGE_NONE][0]['target_id']);
  }
  if (empty($h5p_node)) {
    $h5p_node = array();
  }
  else {
    $h5p_node = array(
      'nid' => $h5p_node->nid,
      'vid' => $h5p_node->vid,
    );
  }
  $h5p_node += array(
    'uid' => $node->uid,
    'name' => $node->name,
    'type' => 'h5p_content',
    'language' => $node->language,
    'title' => $node->title,
    'status' => $node->status,
    'promote' => $node->promote,
    'sticky' => $node->sticky,
    'created' => $node->created,
    'revision' => FALSE,
    'comment' => $node->comment,
    'h5p_type' => 'create',
    'main_library_id' => h5peditor_get_library_property('H5P.CoursePresentation 1.11', 'libraryId'),
    'json_content' => content_conversion_h5p_json($node),
    'embed_type' => 'div',
    'disable' => 0,
    'h5p_library' => 'H5P.CoursePresentation 1.11',
  );
  $h5p_node = (object) $h5p_node;
  node_save($h5p_node);
  $node->field_h5p_node[LANGUAGE_NONE][0]['target_id'] = $h5p_node->nid;
  node_save($node);
  return $h5p_node;
}

/**
 * Generates H5P JSON code from a Content Object node.
 *
 * @param object $content_object
 *   A Content Object node.
 */
function content_conversion_h5p_json($content_object) {
  //we don't need to create a slide every time
  $h5p = new stdClass();
  // Convert the Content Object node into a Course Presentation.
  $h5p->presentation = new stdClass();
  $h5p->presentation->slides = array();
  // Loop over the learning objects referenced in the content object.
  // Create one Course Presentation slide for each Learning Object.
  // Exception : there is an instance where the converter needs all the learning object at one time
  $exception_array = array("question_and_answer");
  //not only is this an exception, but it also has to process all the non exceptions
  $previous_learning_object_type = "";
  $exception_content = array();
  $count = 0;
  foreach ($content_object->field_learning_objects[$content_object->language] as $learning_object) {
    $node = node_load($learning_object['target_id']);
    $function = '_content_conversion_node_' . $node->type;
    $function_exception = '_content_conversion_nodes_' . $node->type;

    if (function_exists($function_exception) && in_array($node->type, $exception_array)) {
      //this is an exception
      if (!in_array($previous_learning_object_type, $exception_array)) {
        //is this the first time through?
        //we assume that no List will start with a questions, and if it does, it only has questions
        //run all of them
        if (!$count) {
          $slide = new stdClass();
          $h5p->presentation->slides[] = $slide;
          $function_exception($content_object->field_learning_objects[$content_object->language], $slide);
          break;
        } else {
          //otherwise, this is the first of a bunch of them, queue them up to be run later
          $exception_content[] = $learning_object;
        }
      } else {
        //otherwise, this is the first of a bunch of them, queue them up to be run later
        $exception_content[] = $learning_object;
      }
      if ($node->type != $previous_learning_object_type && in_array($previous_learning_object_type, $exception_array)) {
        if (count($exception_content)) {
          //run the script again
          $slide = new stdClass();
          $h5p->presentation->slides[] = $slide;
          $function_exception($exception_content, $slide);
          $exception_content = array();
        }
      }
    } else {
      //this is not an exception
      //Exception: we just finished processing an exception and have content to process before the next slide
      if (count($exception_content)) {
        //process the previous exception slide so it is before the next included slide
        $function_exception = '_content_conversion_nodes_' . $previous_learning_object_type;
        $slide = new stdClass();
        $h5p->presentation->slides[] = $slide;
        $function_exception($exception_content, $slide);
        //reset the exception content incased there is another exception in this interactive content
        $exception_content = array();
      }
      $slide = new stdClass();
      $h5p->presentation->slides[] = $slide;
      if (function_exists($function)) {
        //process the normal slide
        $function($node, $slide);
      }
    }
    $previous_learning_object_type = $node->type;
    $count++;
  }
  if (count($exception_content)) {
    //process exception content if it is the last learning object used
    $slide = new stdClass();
    $h5p->presentation->slides[] = $slide;
    $function_exception($exception_content, $slide);
  }
  return json_encode($h5p);
}

/**
 * Converts a List node to H5P slide data.
 *
 * @param object $node
 *   A List node.
 * @param object $slide
 *   H5P data for a single slide.
 */
function _content_conversion_node_list($node, $slide) {
  $slide->elements = array();
  foreach ($node->field_list_item[$node->language] as $position => $item) {
    $paragraph = paragraphs_item_load($item['value']);
    $function = '_content_conversion_paragraph_' . $paragraph->bundle();
    if (function_exists($function)) {
      $function($paragraph, $slide, $position, $node);
    }
  }
}

/**
 * Converts a List item collection paragraph to H5P slide elements data.
 *
 * @param object $paragraph
 *   A List item collection paragraph.
 * @param object $slide
 *   H5P data for a single slide.
 * @param int $position
 *   (optional) The position of this paragraph, starting with 0.
 * @param object $node
 *   (optional) The node this paragraph is attached to.
 */
function _content_conversion_paragraph_list_item($paragraph, $slide, $position = 0, $node = NULL) {
  $columns = (int) $node->field_layout[$node->language][0]['value'];
  if (!empty($paragraph->field_list_image)) {
    foreach ($paragraph->field_list_image[LANGUAGE_NONE] as $image) {
      $element = new stdClass();
      $element->x = 24.416135881104033;
      $element->y = 2.0898846960167714;
      $element->width = 46.496815286624205;
      $element->height = 51.99161425576521;
      $action = new stdClass();
      $action->library = 'H5P.Image 1.0';
      $params = new stdClass();
      $file = new stdClass();
      $file->path = file_create_url($image['uri']);
      $file->mime = $image['filemime'];
      $file->width = $image['width'];
      $file->height = $image['height'];
      $params->file = $file;
      $params->alt = $image['field_file_image_alt_text'];
      $action->params = $params;
      $element->action = $action;
      $slide->elements[] = $element;
    }
  }
  elseif (!empty($paragraph->field_list_video)) {
    foreach ($paragraph->field_list_video[LANGUAGE_NONE] as $video) {
      $element = new stdClass();
      $element->x = 1.0615711252654;
      $element->y = 6.2893081761006;
      $element->width = 68.789808917197;
      $element->height = 56.184486373166;
      $action = new stdClass();
      $action->library = 'H5P.Video 1.2';
      $params = new stdClass();
      $visuals = new stdClass();
      $visuals->fit = TRUE;
      $visuals->controls = TRUE;
      $params->visuals = $visuals;
      $params->sources = array();
      $source = new stdClass();
      $source->path = file_create_url($video['uri']);
      $source->mime = $video['filemime'];
      $params->sources[] = $source;
      $action->params = $params;
      $element->action = $action;
      $slide->elements[] = $element;
    }
  }
  if (!empty($paragraph->field_list_text)) {
    foreach ($paragraph->field_list_text[LANGUAGE_NONE] as $text) {
      // Avoid creating empty text box by stripping tags from safe value and
      // trimming white space and non-breaking spaces.
      if (trim(strip_tags($text['safe_value']), " \t\n\r\0\x0B\xC2\xA0") != '') {
        $element = new stdClass();
        $element->x = 1.0615711252654;
        $element->y = 67.027044025157;
        $element->width = 96.390658174098;
        $element->height = 28.930817610063;
        $action = new stdClass();
        $action->library = 'H5P.AdvancedText 1.1';
        $params = new stdClass();
        $params->text = $text['value'];
        $action->params = $params;
        $element->action = $action;
        $slide->elements[] = $element;
      }
    }
  }
}

/**
 * Converts a Story node to H5P slide data.
 *
 * @param object $node
 *   A Story node.
 * @param object $slide
 *   H5P data for a single slide.
 */
function _content_conversion_node_story($node, $slide) {

  $slide->elements = array();
  $slide->slideBackgroundSelector = new stdClass();
  $slide->keywords = array();

  $get_text_array = array(
    "text" => $node->field_story_copy[$node->language][0]['safe_value'],
    "label" => $node->field_story_label[$node->language][0]['value'],
    "x" => '1.0615711252654',
    "y" => '2.0898846960168',
    "width" => '98.513800424628',
    "height" => '58.280922431866',
  );
  $slide->elements[] = _create_text_object($get_text_array);

  if (!empty($node->field_story_image[$node->language][0]['uri'])) {
    $element = new stdClass();
    $element->x = 1.0615711252654;
    $element->y = 59.538784067086;
    $element->width = 30.430461002119;
    $element->height = 40;
    $element->alwaysDisplayComments = false;
    $element->backgroundOpacity = 0;
    $element->displayAsButton = false;
    $element->invisible = false;
    $element->solution = '';

    $params = new stdClass();
    $params->contentName = "Image";
    $params->alt = "Image for the slide";
    $params->file = _create_image_object($node->field_story_image[$node->language][0]);

    $action = new stdClass();
    $action->library = "H5P.Image 1.0";
    $action->subContentId = 0;
    $action->params = $params;
    $element->action = $action;
    $slide->elements[] = $element;
  }
}

/**
 * Created by SUPRIYA RAJGOPAL on 25Aug16
 *
 * Generates H5P JSON of Reveal learning object type.
 *
 * @param object $content_object
 *   A Content Object node.
 * @param object $slide
 *   A slide object.
 * Returns array matching the JSON structure
 */
function _content_conversion_node_reveal($learning_object, $slide)
{	
	$element = new stdClass(); //Elements of the slide. In this case, the Click To Reveal option within a Course Presentation.
	
	//Set position & dimension of element within the slide 
	$element->x = 1;
	$element->y = 0;
	$element->width = 97;
	$element->height = 96;
	
	$element->action = new stdClass();
	$element->action->library = 'H5P.ClickToReveal 1.0';
	
	$element->action->params = new stdClass();
	
	//Intro text of learning object to H5P description
	if(isset($learning_object->field_intro) && !empty($learning_object->field_intro))
		$element->action->params->description = $learning_object->field_intro[$learning_object->language][0]['value'];
	else
		$element->action->params->description = t('');
	
	$element->action->params->cards = array();
	
	//Create card objects array iff Reveal collection paragraph bundle is not empty
	if(isset($learning_object->field_reveal_collection) && !empty($learning_object->field_reveal_collection))
	{
		$cards = $learning_object->field_reveal_collection[$learning_object->language]; //Array of cards
		
		/**
		 * foreach Click To Reveal card..
		 *  load the Paragraph entity i.e Reveal collection field in Reveal content type,
		 *  access each of thumbnail, large image & text of the paragraph and
		 *  form the card object and push to the cards array
		 */
		foreach($cards as $card) 
		{
			$cardParagraphEntity = entity_load('paragraphs_item', array($card['value'])); //Borrowed from https://www.drupal.org/node/2510602#comment-10049490
			
			$cardObject = new stdClass();
			
			$cardParagraph = $cardParagraphEntity[$card['value']];
			
			//Thumbnail image object
			if(isset($cardParagraph->field_reveal_thumbnail) && !empty($cardParagraph->field_reveal_thumbnail))
			  $cardObject->thumbnail_image = _create_image_object($cardParagraph->field_reveal_thumbnail[LANGUAGE_NONE][0]);
			
			//Large image object
			if(isset($cardParagraph->field_reveal_hero) && !empty($cardParagraph->field_reveal_hero))
			  $cardObject->large_image = _create_image_object($cardParagraph->field_reveal_hero[LANGUAGE_NONE][0]);
		
			//Text
			if(isset($cardParagraph->field_reveal_text) && !empty($cardParagraph->field_reveal_text))
			{
				$text = $cardParagraph->field_reveal_text[LANGUAGE_NONE][0]['safe_value'];
				$cardObject->text = $text;
			}
			
			$element->action->params->cards[] = $cardObject;
		}
	}
	else
		$element->action->params->cards[] = new stdClass();
	
	//Title of Click to Reveal element
	if(isset($learning_object->field_subtitle) && !empty($learning_object->field_subtitle))
		$element->action->params->title = $learning_object->field_subtitle[$learning_object->language][0]['value'];
	else
		$element->action->params->title = t('');
	
	//Default, constant settings
	$element->action->params->retry = t('Retry');
	$element->action->subContentId = 0;
	$element->alwaysDisplayComments = false;
	$element->backgroundOpacity = 0;
	$element->displayAsButton = false;
	$element->invisible = false;
	$element->solution = "";
	
	$slide->elements[] = $element; //Array of elements
	
	$slide->slideBackgroundSelector = new stdClass(); //Empty since no background image will be selected
	$slide->keywords = array(); //Empty since no keywords will be specified
}

/**
 * Converts a Hot Spot node to H5P slide data.
 *
 * @param object $node
 *   A Hot Spot node.
 * @param object $slide
 *   H5P data for a single slide.
 */
function _content_conversion_node_hot_spots($node, $slide) {

  $slide->elements = array();
  $slide->slideBackgroundSelector = new stdClass();
  $slide->keywords = array();

  if (!empty($node->field_intro[$node->language][0]['safe_value'])) {
    $get_text_array = array(
      "text" => $node->field_intro[$node->language][0]['safe_value'],
      "x" => '0',
      "y" => '0',
      "width" => '95.329087048832',
      "height" => '66.666666666667',
    );
    $slide->elements[] = _create_text_object($get_text_array);
  }

  $slide->elements[] = _create_hotspot_object($node);
}

/**
 * Created by SUPRIYA RAJGOPAL on 27Aug16
 *
 * Generates H5P JSON of Drag Select learning object type.
 *
 * @param object $content_object
 *   A Content Object node.
 * @param object $slide
 *   A slide object.
 * Returns array matching the JSON structure
 */
function _content_conversion_node_drag_select($learning_object, $slide)
{
  $element = new stdClass(); //Elements of the slide. In this case, the Drag&Drop option within a Course Presentation

  //Set position & dimension of element within the slide
  $element->x = 1;
  $element->y = 0;
  $element->width = 97;
  $element->height = 96;

  $element->action = new stdClass();
  $element->action->library = 'H5P.DragQuestion 1.6';

  $element->action->params = new stdClass();

  //Default, constant settings
  $element->action->params->scoreShow = t('Submit');
  $element->action->params->tryAgain = t('Retry');
  $element->action->params->correct = t('Show solution');

  //Correct feedback text
  if(isset($learning_object->field_correct_feedback) && !empty($learning_object->field_correct_feedback))
    $element->action->params->feedback = $learning_object->field_correct_feedback[$learning_object->language][0]['value'];
  else
    $element->action->params->feedback = t('');

  //Incorrect feedback text
  if(isset($learning_object->field_incorrect_feeback) && !empty($learning_object->field_incorrect_feeback))
    $element->action->params->incorrect_feedback = $learning_object->field_incorrect_feeback[$learning_object->language][0]['value'];
  else
    $element->action->params->incorrect_feedback = t('');

  $element->action->params->question = new stdClass();
  $element->action->params->question->settings = new stdClass();
  $element->action->params->question->settings->size = new stdClass();
  $element->action->params->question->settings->size->width = 800;
  $element->action->params->question->settings->size->width = 500;
  $element->action->params->question->task = new stdClass();

  //DRAGGABLE ELEMENT CREATION SECTION
  //Create draggable elements array iff Drag Select collection paragraph bundle is not empty
  if(isset($learning_object->field_drag_select_collection) && !empty($learning_object->field_drag_select_collection))
  {
    $draggables = $learning_object->field_drag_select_collection[$learning_object->language]; //Array of draggable elements

    /**
     * foreach Draggable Element...
     *  load the Paragraph entity i.e Drag Select collection field in Drag Select content type,
     *  access each property and
     *  form the draggable element object and push to the draggableElements array
     */
    $i = 0; //Index of draggable element. Used to dynamically set 'y' co-ordinate of draggable element arranged vertically
    $correctElements = array(); //The indices of correct answers to be set in dropzone object

    foreach($draggables as $draggable)
    {
      $dragSelectParagraphEntity = entity_load('paragraphs_item', array($draggable['value'])); //Borrowed from https://www.drupal.org/node/2510602#comment-10049490

      $draggableElement = new stdClass();

      $draggableElement->x = 7;
      $draggableElement->y = 6 * ($i + 1); //Starts from '6', gap of '6' between each element
      $draggableElement->width = 18;
      $draggableElement->height = 2;

      $dragSelectParagraph = $dragSelectParagraphEntity[$draggable['value']];

      $draggableElement->type = new stdClass();
      $draggableElement->type->params = new stdClass();

      //If draggable element is an image
      if(isset($dragSelectParagraph->field_drag_select_image) && !empty($dragSelectParagraph->field_drag_select_image))
      {
        $draggableImage = $dragSelectParagraph->field_drag_select_image[LANGUAGE_NONE][0];

        $draggableElement->type->library = 'H5P.Image 1.0';
        $draggableElement->type->params->contentName = 'Image';
        $draggableElement->type->params->alt = t('@text',array('@text' => $draggableImage['alt']));
        $draggableElement->type->params->file = _create_image_object($draggableImage);
      }

      //If draggable element is text
      if(isset($dragSelectParagraph->field_drag_select_text) && !empty($dragSelectParagraph->field_drag_select_text))
      {
        $draggableElement->type->library = 'H5P.AdvancedText 1.1';
        $draggableElement->type->params->text = t('@text',array('@text' => drupal_html_to_text($dragSelectParagraph->field_drag_select_text[LANGUAGE_NONE][0]['value'])));
      }

      //If this is a correct answer
      if(isset($dragSelectParagraph->field_correct_answer) && !empty($dragSelectParagraph->field_correct_answer))
        $isCorrect = $dragSelectParagraph->field_correct_answer[LANGUAGE_NONE][0]['value'];
      else
        $isCorrect = 0;

      if($isCorrect)
        array_push($correctElements,strval($i)); //Convert index to string since dropzone section expects string indices as an array

      $draggableElement->type->subContentId = 0; //Common to both draggable image &/or text

      $draggableElement->dropZones = array("0"); //Which dropzone does this draggable element correctly belong to.In our case, always 1st(0th index) because only 1 dropzone will exist
      $draggableElement->backgroundOpacity = 100;
      $draggableElement->multiple = false;

      $element->action->params->question->task->elements[] = $draggableElement;

      $i++; //Increment index counter
    }
  }

  //DROPZONE CREATION SECTION
  $dropZone = new stdClass();
  $dropZone->x = 50; //Co-ordinates of Dropzone, set to appear on right hand side
  $dropZone->y = 5;
  $dropZone->width = 25;
  $dropZone->height = 30;
  $dropZone->correctElements = $correctElements;
  $dropZone->showLabel = false;
  $dropZone->backgroundOpacity = 100;
  $dropZone->single = false; //Multiple correct elements in dropzone allowed if false, only 1 allowed if true
  $dropZone->label = '<div>Drop Zone</div>\n';
  $dropZone->tip = '';
  $element->action->params->question->task->dropZones[] = $dropZone;

  //Question Title
  if(isset($learning_object->field_drag_select_question) && !empty($learning_object->field_drag_select_question))
    $element->action->params->question->settings->questionTitle = t('@text',array('@text' => drupal_html_to_text($learning_object->field_drag_select_question[$learning_object->language][0]['value'])));
  else
    $element->action->params->question->settings->questionTitle = t('');

  //Default, constant settings
  $element->action->params->behaviour = new stdClass();
  $element->action->params->behaviour->enableRetry = true;
  $element->action->params->behaviour->singlePoint = false;
  $element->action->params->behaviour->showSolutionsRequiresInput = true;
  $element->action->subContentId = 0;
  $element->alwaysDisplayComments = false;
  $element->backgroundOpacity = 0;
  $element->displayAsButton = false;
  $element->invisible = false;
  $element->solution = "";

  $slide->elements[] = $element; //Array of elements
  $slide->slideBackgroundSelector = new stdClass(); //Empty since no background image will be selected
  $slide->keywords = array(); //Empty since no keywords will be specified
}

/**
   * Converts a Q/A nodes to H5P slide data.
   *
   * @param object $nodes
   *   All the Learning objects with Question Answer paragraphs.
   * @param object $slide
   *   H5P data for a single slide.
 */
function _content_conversion_nodes_question_and_answer($nodes, $slide) {

  $slide->elements = array();
  $slide->slideBackgroundSelector = new stdClass();
  $slide->keywords = array();

  $element = new stdClass();
  $element->x = 0;
  $element->y = 0;
  $element->width = 99.787685774947;
  $element->height = 99.58071278826;
  $element->alwaysDisplayComments = false;
  $element->backgroundOpacity = 0;
  $element->displayAsButton = false;
  $element->invisible = false;
  $element->solution = '';

  $action = new stdClass();
  $action->library = "H5P.QuestionSet 1.8";
  $action->subContentId = '0';

  $params = new stdClass();
  /* no sample yet
  if (!empty($node->field_intro[$node->language][0]['safe_value'])) {
    $get_text_array = array(
      "showIntroPage" => '',
      "startButtonText" => '',
      "title" => '',
      "introduction" => '',
    );
    $params->introPage = $get_text_array;
  }*/
  $params->progressType = 'dots';
  $params->passPercentage = 80;

  $params->texts = array(
    "prevButton" => "Previous question",
    "nextButton" => "Next question",
    "finishButton" => "Finish",
    "textualProgress" => "Question: @current of @total questions",
    "jumpToQuestion" => "Jump to question %d",
    "questionLabel" => "Question"
  );
  $params->endGame = array(
    "showResultPage" => false,
    "noResultMessage" => "Finished",
    "message" => "Your result:",
    "scoreString" => "You got @score of @total points",
    "successGreeting" => "Congratulations!",
    "successComment" => "You did very well!",
    "failGreeting" => "You did not pass this time.",
    "failComment" => "Have another try!",
    "solutionButtonText" => "Show solution",
    "retryButtonText" => "Retry",
    "finishButtonText" => "Finish",
    "showAnimations" => false,
    "skippable" => false,
    "skipButtonText" => "Skip video"
  );
  $params->override = array();
  $questions = array();
  foreach($nodes as $key => $node_target) {
    $node = node_load($node_target['target_id']);
    $questions[] = _create_question_object($node->field_paragraph_multiple_choice[$node->language][0]['value']);
  }
  $params->questions = $questions;
  $action->params = $params;
  $element->action = $action;

  $slide->elements[] = $element;
}

/*
 * Utility Function
 * _create_qa_object - takes a paragraph id and returns the necessary question and answer element for inserting into a question set
 */
function _create_question_object($target_id) {

  $question_entity = entity_load('paragraphs_item', array($target_id));
  $question_item = $question_entity[$target_id];

  $question = new stdClass();
  $question->library = "H5P.MultiChoice 1.7";
  $question->subContentId = '0';

  $params = new stdClass();
  //field_question_image no sample
  //field_question_video_file no sample
  //field_video_poster_img no sample
  $params->question = $question_item->field_question_text['und'][0]['safe_value'];

  $answers = array();
  foreach($question_item->field_paragraph_answer['und'] as $key => $value) {
    $entity = entity_load('paragraphs_item', array($value['value']));
    $item = $entity[$value['value']];

    $answer = new stdClass();
    //field_answer_image no sample
    $answer->correct = ($item->field_correct_answer['und'][0]['value']) ? true : false;
    $answer->tipsAndFeedback = array(
      "chosenFeedback" => $item->field_answer_feedback['und'][0]['safe_value'],
      "tip" => "",
      "notChosenFeedback" => ""
    );
    $answer->text = $item->field_answer_text['und'][0]['safe_value'];

    $answers[] = $answer;
  }
  $params->answers = $answers;

  $params->UI = array(
    "checkAnswerButton" => "Submit",
    "showSolutionButton" => "Show solution",
    "tryAgainButton" => "Retry",
    "tipsLabel" => "Show tip",
    "correctText" => "Correct!",
    "almostText" => "Almost!",
    "wrongText" => "Wrong",
    "scoreBarLabel" => "Score",
    "tipAvailable" => "Tip available",
    "feedbackAvailable" => "Feedback available",
    "readFeedback" => "Read feedback",
    "wrongAnswer" => "Wrong answer",
    "correctAnswer" => "Correct answer",
    "shouldCheck" => "Should have been checked",
    "shouldNotCheck" => "Should not have been checked",
    "noInput" => "Please answer before viewing the solution"
  );
  $params->behaviour = array(
    "enableRetry" => true,
    "enableSolutionsButton" => false,
    "type" => "single",
    "singlePoint" => false,
    "randomAnswers" => false,
    "showSolutionsRequiresInput" => true,
    "disableImageZooming" => false,
    "confirmCheckDialog" => false,
    "confirmRetryDialog" => false
  );
  $params->confirmCheck = array(
    "header" => "Finish ?",
    "body" => "Are you sure you wish to finish ?",
    "cancelLabel" => "Cancel",
    "confirmLabel" => "Finish"
  );
  $params->confirmRetry = array(
    "header" => "Retry ?",
    "body" => "Are you sure you wish to retry ?",
    "cancelLabel" => "Cancel",
    "confirmLabel" => "Confirm"
  );
  $params->media = array('params'=>'');

  $question->params = $params;

  return $question;
}

/*
 * Utility Function
 * _create_hotspot_object - takes a node and returns the necessary element for inserting into a slide
 */
function _create_hotspot_object($node) {

  $element = new stdClass();
  $element->x = 0;
  $element->y = 0;
  $element->width = 99.787685774947;
  $element->height = 99.58071278826;
  $element->alwaysDisplayComments = false;
  $element->backgroundOpacity = 0;
  $element->displayAsButton = false;
  $element->invisible = false;
  $element->solution = '';

  $action = new stdClass();
  $action->library = "H5P.ImageHotspots 1.3";
  $action->subContentId = '0';

  $params = new stdClass();
  $params->color = "ecb328";
  $params->image = _create_image_object($node->field_hot_spot_image[$node->language][0]);

  $hotspots = array();
  foreach($node->field_hot_spot_collection[$node->language] as $key => $value) {
    $entity = entity_load('paragraphs_item', array($value['value']));
    $hotspot = $entity[$value['value']];

    $hotspot_object = new stdClass();
    $hotspot_object->alwaysFullscreen = 'false';
    $hotspot_object->header = "";

    $position_array = array();
    $x_temp = $hotspot->field_hot_spot_x_cordinate['und'][0]['value'];
    $pos_x = $params->image->width * ((ord(strtolower(str_replace("pos","",$x_temp))) - 96)/16);
    $y_temp = $hotspot->field_hot_spot_y_cordinate['und'][0]['value'];
    $pos_y = $params->image->height * (str_replace("pos","",$y_temp)/19);

    $position_array['x'] = ($pos_x/$params->image->width) * 100;
    $position_array['y'] = ($pos_y/$params->image->height) * 100;

    $hotspot_object->position = $position_array;

    $content = new stdClass();
    $content->params = array(
      "text" => $hotspot->field_hot_spot_text['und'][0]['safe_value'],
    );
    $content->library = "H5P.Text 1.1";
    $content->subContentId = '0';

    $hotspot_object->content = array($content);
    $hotspots[] = $hotspot_object;
  }

  $params->hotspots = $hotspots;
  $action->params = $params;
  $element->action = $action;

  return $element;
}

/*
 * Utility Function
 * _create_image_object - takes an image array and returns a properly formatted file object for h5p conversion
 * receives one drupal image array
 * uri, filemime, height, width
 * returns an image object ready for json conversion
 */
function _create_image_object($image_array) {

  $file = new stdClass();
  $file->path = file_create_url($image_array['uri']);
  $file->mime = $image_array['filemime'];
  $file->width = $image_array['width'];
  $file->height = $image_array['height'];
  $copyright = new stdClass();
  $copyright->license = "U";
  $file->copyright = $copyright;
  return $file;

}

/*
 * Utility Function
 * _create_image_object - takes an image array and returns a properly formatted file object for h5p conversion
 * receives one drupal image array
 * uri, filemime, height, width
 * returns an image object ready for json conversion
 */
function _create_text_object($text_array = null) {

  $element = new stdClass();
  $element->alwaysDisplayComments = false;
  $element->backgroundOpacity = 0;
  $element->displayAsButton = false;
  $element->invisible = false;
  $element->solution = '';

  $element->x = $text_array['x'];
  $element->y = $text_array['y'];
  $element->width = $text_array['width'];
  $element->height = $text_array['height'];

  $action = new stdClass();
  $action->library = "H5P.AdvancedText 1.1";
  $action->subContentId = '0';

  $params = new stdClass();
  $params->text = $text_array['text'];
  if (!empty($text_array['label'])) {
    $params->contentName = $text_array['label'];
  }
  $params->alt = '';
  $action->params = $params;

  $element->action = $action;
  $action->subContentId = 0;

  return $element;
}
