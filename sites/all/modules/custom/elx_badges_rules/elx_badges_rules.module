<?php

/**
 * Implements hook_form_alter().
 * To add event to Badge Award Notification rule whenever You are an Inspiration badge is created manually because we cannot expect the ELX admin to manually add this event to the rule
 * Whenever a user flag is created, if it has a non-empty 'Earned Badge Description' field, we consider that this is a badge flag & add event if not already added
 */
function elx_badges_rules_form_alter(&$form, &$form_state, $form_id)
{
	if($form_id == 'flag_form') //'flag_add_form' is the one where the Flag Type (Node, User, Taxonomy, etc) is chosen whereas 'flag_form' is the actual form
	{
		$flag = isset($form['#flag']->name)?flag_load($form['#flag']->name):new stdClass();

		//Additional submit handler to add event to existing rule iff flag is being created, already existing flags are already handled in the rule
		if(empty($flag))
			$form['#submit'][] = '_elx_badges_rules_form_submit_add_flagged_event_to_rule';
	}
}

/**
 * User defined submit handler function to add event to Badge Award Notification rule whenever You are an Inspiration badge is created manually
 * This is because we cannot expect the ELX admin to manually add this event to the rule
 * Borrowed from http://drupal.stackexchange.com/questions/167717/what-is-the-correct-way-to-update-existing-modules-rules-programmatically & https://www.drupal.org/node/1675748
 */
function _elx_badges_rules_form_submit_add_flagged_event_to_rule($form, &$form_state)
{
	$values = $form_state['values'];
	$flag = $form['#flag'];

	if($flag->entity_type == 'user' && !empty($flag->badge_description['value']))
	{
		$rule = rules_config_load('rules_badge_award_notification');
		$event = "flag_flagged_".$flag->name; //Machine name of event borrowed from flag\flag.rules.inc
		$rule->event($event); //Add the event to the rule
		$rule->save(); //Save the rule
	}
}

/**
 * Implements hook_flag_delete().
 * Removes this 'user flagged' event from Badge Award Notifications rule
 */
function elx_badges_rules_flag_delete($flag)
{
	$rule = rules_config_load('rules_badge_award_notification');
	$event = "flag_flagged_".$flag->name; //Machine name of event borrowed from flag\flag.rules.inc
	if(in_array($event,$rule->events()))
	{
		$rule->removeEvent($event);
		$rule->save();
	}
}

/**
 * Implements hook_rules_action_info().
 */
function elx_badges_rules_rules_action_info() {
	return array(
		'_elx_badge_rules_get_h5p_max_points' => array(
			'label' => t('Load maximum H5P points of Interactive Content node (H5P quiz)'),
			'parameter' => array(
				'node' => array(
					'type' => 'node',
					'label' => t('Interactive Content node'),
					'description' => t('The maximum points that can be scored on an Interactive Content node (H5P quiz)'),
				),
			),
			'new variables' => array(
				'loaded_h5p_max_points' => array(
					'type' => 'integer',
					'label' => t('Maximum H5P points'),
				),
			),
			'group' => t('ELX'),
		),
		'_elx_badge_rules_get_h5p_user_points' => array(
			'label' => t('Load H5P points of user scored on Interactive Content node (H5P quiz)'),
			'parameter' => array(
				'user' => array(
					'type' => 'user',
					'label' => t('User'),
					'description' => t('The user who scored points on the Interactive Content node (H5P quiz)'),
				),
				'node' => array(
					'type' => 'node',
					'label' => t('Interactive Content node'),
					'description' => t('The points scored by user on the Interactive Content node (H5P quiz)'),
				),
			),
			'new variables' => array(
				'loaded_h5p_user_points' => array(
					'type' => 'integer',
					'label' => t('H5P user points'),
				),
			),
			'group' => t('ELX'),
		),
		'_elx_badge_rules_get_h5p_tagged_count' => array(
			'label' => t('Load count of H5P nodes tagged with a specific Learning Level'),
			'parameter' => array(
				'user' => array(
					'type' => 'user',
					'label' => t('User'),
					'description' => t('The user on whose behalf this H5P node is flagged. Leave blank to ignore this condition.'),
					'optional' => TRUE,
				),
				'taxonomy' => array(
					'type' => 'integer',
					'label' => t('Learning Level'),
					'description' => t('The learning level that this H5P node is tagged with'),
					'options list' => '_get_taxonomy_term_options',
				),
			),
			'new variables' => array(
				'h5p_tagged_count' => array(
					'type' => 'integer',
					'label' => t('H5P tagged count'),
				),
			),
			'group' => t('ELX'),
		),
		'_elx_get_list_count' => array(
			'label' => t('Get length of list'),
			'group' => t('ELX'),
			'parameter' => array(
				'list' => array(
					'type' => '*',
					'label' => t('List'),
				),
			),
			'provides' => array(
				'list_length' => array(
					'type' => 'integer',
					'label' => t('List length'),
				),
			),
		),
		'_elx_flag_fetch_node_bundle_by_user' => array(
			'label' => t('Fetch nodes flagged by user based on bundle'),
			'parameter' => array(
				'flag' => array(
					'type' => 'flag',
					'label' => t('Flag'),
					'description' => t('The flag to check for.'),
				),
				'flagging_user' => array(
					'type' => 'user',
					'label' => t('User who flagged the node'),
					'description' => t('For non-global flags, this is the user who flagged the node. (For global flags, this argument is ignored.)'),
				),
				//Borrowed from rules\modules\entity.rules.inc
				'bundle' => array(
					'type' => 'list<text>',
					'label' => t('Entity bundle'),
					'description' => t('The condition is met if the entity is of one of the selected bundles.'),
					'options list' => '_get_bundles',
					'restriction' => 'input',
					'optional' => TRUE
				),
			),
			'provides' => array(
				'content_flagged_by_user' => array(
					'label' => t('Nodes flagged by user'),
					'type' => 'list<node>',
				),
			),
			'group' => t('ELX'),
		),
		'_elx_get_completed_levels_count' => array(
			'label' => t('Load count of Learning Levels completed by a user'),
			'parameter' => array(
				'user' => array(
					'type' => 'user',
					'label' => t('User'),
					'description' => t('The user on whose behalf this H5P node is flagged.'),
				),
				'taxonomy' => array(
					'type' => 'integer',
					'label' => t('Learning Level'),
					'description' => t('The learning level that this H5P node is tagged with. Leave blank to ignore this condition.'),
					'options list' => '_get_taxonomy_term_options',
					'optional' => TRUE,
				),
			),
			'new variables' => array(
				'completed_level_count' => array(
					'type' => 'integer',
					'label' => t('Completed level count'),
				),
			),
			'group' => t('ELX'),
		),
	);
}

/**
 * Rules action - Load the maximum points that can be scored on an Interactive Content node (H5P quiz)
 */
function _elx_badge_rules_get_h5p_max_points($node) {
	return array('loaded_h5p_max_points' => _elx_badge_rules_get_h5p_max_points_callback($node->vid));
}

/**
 * Rules action - Load the points scored by user on the Interactive Content node (H5P quiz)
 */
function _elx_badge_rules_get_h5p_user_points($account,$node) {
	return array('loaded_h5p_user_points' => _elx_badge_rules_get_h5p_user_points_callback($account->uid,$node->vid));
}

/**
 * Get maximum points that can be scored on an Interactive Content node (H5P quiz)
 * @param $vid
 *   Revision ID of the Interactive Content node whose maximum achievable H5P points are to be loaded
 *
 * @return
 *   Maximum achievable H5P points for that node
 */
function _elx_badge_rules_get_h5p_max_points_callback($vid = NULL)
{
	//When an Interactive Content node is not of type 'Question Set/Quiz', no points will be associated with it. In such a case, return -1.
	if(!$vid)
		return -1;

	$query = db_select('h5p_points','p');
	$query->join('node_revision','nr','nr.vid = p.content_id');
	$query->fields('p',array('max_points'));
	$query->condition('content_id',$vid,'=');
	$query->groupBy('content_id');
	$points = $query->execute()->fetchField();
	if($points == null)
		return -1;
	else
		return $points;
}

/**
 * Get points scored by the user on an Interactive Content node (H5P quiz)
 * @param $uid
 *	 User ID of the user who scored points
 * @param $vid
 *   Revision ID of the Interactive Content node on which, H5P points scored by the the user are to be loaded
 *
 * @return
 *   H5P points for that node scored by this user
 */
function _elx_badge_rules_get_h5p_user_points_callback($uid = NULL,$vid = NULL)
{
	//When an Interactive Content node is not of type 'Question Set/Quiz', no points will be associated with it. In such a case, return -1.
	if(!$vid || !$uid)
		return -1;

	$query = db_select('h5p_points','p');
	$query->join('node_revision','nr','nr.vid = p.content_id');
	$query->fields('p',array('points'));
	$query->condition('content_id',$vid,'=');
	$query->condition('uid',$uid,'=');
	$points = $query->execute()->fetchField();
	if($points == null)
		return -1;
	else
		return $points;
}

/**
 * Get number of H5P nodes tagged with a specific Learning Level
 * @param $uid
 *	 User ID of the user on behalf of whom the node is flagged as First Viewed Content
 * @param $tid
 *   Term ID of the Learning Level
 *
 * @return
 *   Count of H5P nodes tagged with this learning level (and flagged as First Viewed Content by the current user, if uid is passed)
 */
function _elx_badge_rules_get_h5p_tagged_count($user = NULL,$tid = NULL)
{
	$flagName = 'first_viewed_content';

	//When an Interactive Content node is not of type 'Question Set/Quiz', no points will be associated with it. In such a case, return -1.
	if(!$tid)
		return -1;

	$query = db_select('h5p_nodes','h');
	$query->join('field_data_field_learning_category','l','l.entity_id = h.nid');
	if($user)
	{
		$query->join('flagging','fg','fg.entity_id = h.nid');
		$query->join('flag','f','f.fid = fg.fid');
		$query->condition('f.name',db_like($flagName),'LIKE');
		$query->condition('fg.uid',$user->uid,'=');
	}
	$query->condition('l.field_learning_category_tid',$tid,'=');
	$query->groupBy('l.field_learning_category_tid');
	$query->addExpression('COUNT(nid)', 'count');
	$count = $query->execute()->fetchField();

	return array('h5p_tagged_count' => $count);
}

/**
 * Get count of a list
 * Borrowed from http://drupal.stackexchange.com/questions/45205/how-can-i-get-the-length-of-a-list-in-rules
 * @param $list
 *	 List whose length is to be returned
 * @return
 *   Length of this list
 */
function _elx_get_list_count($list)
{
	return array(
		'list_length' => is_array($list) ? count($list) : NULL,
	);
}

/**
 * Fetch nodes filtered by bundle flagged by a user.
 * Borrowed from flag\flag.rules.inc
 *
 * @param $flag
 *	 Flag object to check for
 * @param $entity
 *   Nodes to be flagged
 *
 * @return
 *   Nodes of the chosen bundles flagged by the user
 */
function _elx_flag_fetch_node_bundle_by_user($flag, $entity, $bundle) {
	$query = db_select('flagging', 'fc')
		->fields('fc', array('entity_id'))
		->condition('fc.entity_type', $flag->entity_type)
		->condition('fc.fid', $flag->fid);
	if(!empty($bundle))
	{
		$query->join('node','n','n.nid = fc.entity_id');
		$query->condition('n.type',$bundle);
	}
	// For global flags the user parameter is ignored, so we add the
	// extra 'uid' condition when the flag is NOT global.
	if (!$flag->global) {
		$user = entity_metadata_wrapper('user', $entity);
		$sid = $user->flag_sid->value();
		$query = $query->condition('fc.uid', $user->uid->value());
		// Filter out any bad session ids and any users that aren't anonymous.
		if (!empty($sid) && $sid != -1) {
			$query->condition('fc.sid', $sid);
		}
	}
	$result = $query->execute();
	$flagged = $result->fetchCol();
	return array('content_flagged_by_user' => $flagged);
}

/**
 * Get count of Learning Levels completed by a user
 * @param $uid
 *	 User ID of the user on behalf of whom the node is flagged as First Viewed Content
 * @param $tid
 *   Term ID of the Learning Level (optional)
 *
 * @return
 *   Count of Learning Levels completed by a user
 */
function _elx_get_completed_levels_count($user = NULL,$tid = 0)
{
	$flagName = 'first_viewed_content';

	//When an Interactive Content node is not of type 'Question Set/Quiz', no points will be associated with it. In such a case, return -1.
	if(!$user)
		return -1;

	$tidCondition = ($tid) ? " where x.learning_level = ".$tid : " where 1=1"; //Optionally filter based on Learning Level passed as parameter

	//Get the total no. of nodes tagged with learning levels and the no. of nodes viewed by the user in the same query
	//Borrowed from http://stackoverflow.com/questions/13400726/mysql-combine-two-queries
	$query = db_query('select y.learning_level,total,viewed
			from 
			( select count(nid) as viewed, l.field_learning_category_tid as learning_level 
			  from {h5p_nodes} as h join {field_data_field_learning_category} as l on l.entity_id = h.nid 
			  join {flagging} as fg on fg.entity_id = h.nid 
			  join {flag} as f on f.fid = fg.fid 
			  where f.name like :flag_name and fg.uid = :flagging_uid
			  group by l.field_learning_category_tid
			) x
			right outer join
			( select count(nid) as total, l.field_learning_category_tid as learning_level 
			  from {h5p_nodes} as h join {field_data_field_learning_category} as l on l.entity_id = h.nid 
			  group by l.field_learning_category_tid
			) y 
			on x.learning_level = y.learning_level '.$tidCondition.' ',array(':flag_name' => $flagName,':flagging_uid' => $user->uid));
	$rows = $query->fetchAll(); //Retrieve all records into an indexed array of stdClass objects.

	$completed_level_count = 0;
	foreach($rows as $row)
	{
		if($row->total == $row->viewed)
			$completed_level_count++;
	}

	return array('completed_level_count' => $completed_level_count);
}

/**
 * Helper function to get an array of taxonomy terms of Learning Level vocabulary
 * Borrowed from http://dropbucket.org/node/688
 * Vocabulary ID is not passed as parameter because rules doesn't have an option to do so for 'options list'
 * @return associative array of terms keyed by tid for Learning Level vocabulary
 */
function _get_taxonomy_term_options()
{
	$vname = 'learning_category';
	$options = array('0' => t('--Select--'));
	$vocabulary = taxonomy_vocabulary_machine_name_load($vname);
	$vid = $vocabulary->vid;
	$options_source = taxonomy_get_tree($vid); //Get array of taxonomy term objects of this vocabulary
	foreach($options_source as $item)
	{
		$key = $item->tid;
		$value = $item->name;
		$options[$key] = $value;
	}
	return $options;
}

/**
 * Helper function to get an array of content types
 * Borrowed from flag\includes\flag\flag_entity.inc
 * @return associative array of content types keyed by their machine names
 */
function _get_bundles()
{
	$bundles = array();
	$entity_info = entity_get_info('node');
	foreach ($entity_info['bundles'] as $bundle_key => $bundle) {
		$bundles[$bundle_key] = check_plain($bundle['label']);
	}
	return $bundles;
}

/**
 * Implements hook_menu().
 */
function elx_badges_rules_menu() {
	$items['admin/config/people/userpoints/consolidate'] = array(
		'title' => 'Consolidate',
		'page callback' => 'elx_badges_rules_consolidate_userpoints',
		'access callback' => TRUE,
	);

	return $items;
}

/* This is a simple utility that can clean up the category column of the userpoints while tallying the points.
 *
 *
 */
function elx_badges_rules_consolidate_userpoints() {
	drupal_set_message("Consolidating UserPoints");
	$item = array(
		"consolidate_tids" => array(0,14094,14095),
		"tid" => 14135
	);
	$output = '';
	$result = db_query("SELECT * FROM {userpoints} WHERE tid = ".$item['consolidate_tids'][0]);
	foreach ($result as $row) {
		$item['points'] = $row->points;
		if (!empty($row->uid)) {
			//$delete = 0;$delete2 = 0;
			$result2 = db_query("SELECT * FROM {userpoints} WHERE uid = ".$row->uid." AND tid = ".$item['consolidate_tids'][1]);
			foreach ($result2 as $row2) {
				$item['points'] += $row2->points;
				$delete = db_query("DELETE FROM {userpoints} WHERE pid = ".$row2->pid);
				$output .= "Delete User Point (Category ID:PID) ".$item['consolidate_tids'][1].":".$row2->pid."<br>";
			}
			$result3 = db_query("SELECT * FROM {userpoints} WHERE uid = ".$row->uid." AND tid = ".$item['consolidate_tids'][2]);
			foreach ($result3 as $row3) {
				$item['points'] += $row3->points;
				$delete2 = db_query("DELETE FROM {userpoints} WHERE pid = ".$row3->pid);
				$output .= "Delete User Point (Category ID:PID) ".$item['consolidate_tids'][2].":".$row3->pid."<br>";
			}
			$update = db_query("UPDATE {userpoints} SET tid = ".$item['tid'].", points = ".$item['points'].", max_points = ".$item['points']." WHERE pid = ".$row->pid);
			$output .= "New Category ID : ".$item['tid'].", Points = ".$item['points'].", Max Points = ".$item['points']." UserPoint ID ".$row->pid."<br>";
		}
	}
	return "<h1>User Points Concolidation Has Run</h1><div>".$output."</div>";
}
