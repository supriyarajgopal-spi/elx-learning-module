<?php

//require_once 'includes/password.inc';
//require_once 'sites/all/modules/contrib/aes/aes.module';
//require_once 'includes/database/prefetch.inc';


function elx_utility_node_validate($node, $form, &$form_state) {
  // dpm($node);
  // if ($node->type=='history' || $node->type=='teaser') {
  //   if (strlen($node->field_link['und'][0]['url']) && $node->field_video_upload['und'][0]['fid']) {
  //     form_set_error('field', t('You may either use a link or a video, not both.'));
  //   }
  //   elseif (!(strlen($node->field_link['und'][0]['url']) || $node->field_video_upload['und'][0]['fid'])) {
  //     form_set_error('field', t('You must choose either a link or a video (but not both).'));
  //   }
  // }
}

/**
 * Implements hook_preprocess_html.
 */
function elx_utility_preprocess_html(&$variables) {
// Add conditional stylesheets for admin pages on admin theme.
  global $user;
  if ($user->uid) {
    // reference your current admin theme
    $theme_path = drupal_get_path('theme', 'seven');
    // reference your own stylesheet
    drupal_add_css(drupal_get_path('module', 'elx_utility')
    . '/admin.css', array('weight' => CSS_THEME));
    drupal_add_js(drupal_get_path('module', 'elx_utility')
    . '/admin.js');
    drupal_add_js(drupal_get_path('module', 'elx_utility')
    . '/jquery.alphanum.js');
  }
}

/**
 * Random pass generator.
 */
function randomPassword() {
  $alphabet = "abcdefghijkmnopqrstuwxyzABCDEFGHJKMNPQRSTUWXYZ23456789";
  $pass = array(); //remember to declare $pass as an array
  $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache
  for ($i = 0; $i < 8; $i++) {
    $n = rand(0, $alphaLength);
    $pass[] = $alphabet[$n];
  }
  return implode($pass); //turn the array into a string
}

/**
 * Implements hook_feeds_after_save().
 */
function elx_utility_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $password = randomPassword();
  $encrypted_data = aes_encrypt($password);
  if ($entity->pass == '') {
    $entity->pass = $password;
    db_insert('aes_passwords')
      ->fields(array(
        'uid' => $entity->uid,
        'pass' => $encrypted_data,
      ))
      ->execute();
    $pass = user_hash_password($password);
    db_update('users')
      ->fields(array('pass' => $pass))
      ->where("uid = :uid", array(
        ':uid' => $entity->uid,
      ))
      ->execute();
  }
}

/**
 * Implements hook_user_presave().
 */

function elx_utility_user_presave($edit, $account, $category) {
  $tng_debug =0;
  try {
    if (!$account->pass == '') {
      if ($tng_debug == 1) {
        dpm("userid, we have a password in the presave routine so on we go", $account->uid);
      }
      $email = $edit['mail'];
      $hash_pass_from_edit = $edit['pass'];
      $my_user = user_load_by_mail($email);
      $my_user_id = $my_user->uid;
      $hash_from_existing_user = $my_user->pass;
      if ($hash_from_existing_user != $hash_pass_from_edit) {
        if ($tng_debug == 1) {
          dpm("hash from existing user", $hash_from_existing_user);
          dpm("hash from user being edited", $hash_pass_from_edit);
        }
      }
      $pass = db_query("SELECT * FROM {aes_passwords} a WHERE a.uid = $my_user_id")->fetchObject()->pass;
      $decrypted_aes = aes_decrypt( $pass );
      if ( !empty($decrypted_aes) ) {
        if ( !user_check_password($decrypted_aes, $my_user) ) {
          if ($tng_debug == 1) {
            dpm("we think the AES password is different from the existing user password", $decrypted_aes);
            $str = "drush upwd $email --password='$decrypted_aes'";
            dpm($str);
          }
          $str = "drush upwd $email --password='$decrypted_aes'";
          watchdog('elx_utility_user_presave', $str, NULL, WATCHDOG_WARNING);
          shell_exec($str);
        }
      }
    }
  }
  catch (exception $e) {
    print($e);
  }
}

/**
 * Implements hook_user_update().
 */

function elx_utility_user_update($edit, $account, $category) {
  $tng_debug =0;
  try {
    if (!$account->pass == '') {
      if ($tng_debug == 1) {
        dpm("userid, we have a password in the update routine so on we go", $account->uid);
      }
      $email = $edit['mail'];
      $hash_pass_from_edit = $edit['pass'];
      $my_user = user_load_by_mail($email);
      $my_user_id = $my_user->uid;
      $hash_from_existing_user = $my_user->pass;
      if ($hash_from_existing_user != $hash_pass_from_edit) {
        if ($tng_debug == 1) {
          dpm("hash from existing user", $hash_from_existing_user);
          dpm("hash from user being edited", $hash_pass_from_edit);
        }
      }
      $pass = db_query("SELECT * FROM {aes_passwords} a WHERE a.uid = $my_user_id")->fetchObject()->pass;
      $decrypted_aes = aes_decrypt( $pass );
      if ( !empty($decrypted_aes) ) {
        if ( !user_check_password($decrypted_aes, $my_user) ) {
          if ($tng_debug == 1) {
            dpm("we think the AES password is different from the existing user password", $decrypted_aes);
            $str = "drush upwd $email --password='$decrypted_aes'";
            dpm($str);
          }
          $str = "drush upwd $email --password='$decrypted_aes'";
          watchdog('elx_utility_user_update', $str, NULL, WATCHDOG_WARNING);
          shell_exec($str);
        }
      }
    }
  }
  catch (exception $e) {
    print($e);
  }
}

/**
 * Implements hook_clone_node_alter().
 */
function elx_utility_clone_node_alter(&$node, $context) {
  $lang = $node->language;
  // Empty manifest reference
  if (isset($node->field_manifest[$lang][0]['target_id'])) {
    $node->field_manifest[$lang][0]['target_id'] = '';
  }
}
